# -*- coding: utf-8 -*-
"""ml_5_gyakorlo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18apGyh5hduP8MKqxHEPlgTLSRpPL5aBO

# Gyakorló feladatok

Az órai adatbázison hajts végre egy kísérletet (tanítás, predikció és kiértékelés) ahol

*   a szavak szótövét vagy stemjét használjuk a szózsák modellben!
*   egy másik lineáris gépet, a dLogisztkus Regresszió osztályozó algoritmust használunk (Logistic Regression Classifier).

Írd ki, hogy mekkora szótár lesz így illetve mennyi így az accuracy!
"""

import nltk
import pandas as pd

nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
nltk_splitter = nltk.data.load('tokenizers/punkt/english.pickle')
nltk_tokenizer = nltk.tokenize.TreebankWordTokenizer()

from nltk.stem import PorterStemmer
stemmer = PorterStemmer()

#pythonban egy sorban is megoldható :)
# minden docs elemet tokenizálunk, minden tokenre stem()elünk, és a stemeket összefűzzük egy stringgé
def stem_textcol(docs):
  return [" ".join([stemmer.stem(word) for word in nltk_tokenizer.tokenize(doc)]) for doc in docs]

train_data = pd.read_csv('https://github.com/rfarkas/student_data/raw/main/sentiment/train.tsv', sep='\t')
test_data = pd.read_csv('https://github.com/rfarkas/student_data/raw/main/sentiment/test.tsv', sep='\t')

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

vectorizer = CountVectorizer()

filtered_train_docs = stem_textcol(train_data.text)
features = vectorizer.fit_transform(filtered_train_docs)
print("Szótárméret: ", features.shape[1] )

logreg = LogisticRegression(max_iter=5000)
model = logreg.fit(features, train_data.label)

print("Train accuracy: ", accuracy_score(y_true=train_data.label, y_pred=model.predict(features)))

filtered_test_docs = stem_textcol(test_data.text)
test_features = vectorizer.transform(filtered_test_docs)
print("Test accuracy: ", accuracy_score(y_true=test_data.label, y_pred=model.predict(test_features)))