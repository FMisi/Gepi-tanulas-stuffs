# -*- coding: utf-8 -*-
"""ml_10_gyakorlo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M-Z-YWsg7FTNNrpxSVJS9wJ5K3ln2CAR

# Gyakorló feladatok

## 1. feladat
Az alábbi arcérzelem képi adatbázisból vegyük az első 50 képet. Vizualizáljuk ezeket a képeket 2D-ben, úgy, hogy a hasonló képek közelebb vannak egymáshoz!
"""

# arcérzelem képi adatbázis
import pandas as pd
data = pd.read_csv('https://github.com/rfarkas/student_data/raw/main/images/fer2013_1K.csv')
data

#48x48 szürke képek egy stringbe vannak kódolva, így lesz belőle tömb
import numpy as np
def str2img(img):
  return np.reshape(np.asarray(img.split(' '), np.uint8), (48,48))

# képeket most csak a pixelekkel írjuk le
features = []
for x in data.pixels.tolist():
  features.append(str2img(x).flatten())

!wget https://raw.githubusercontent.com/christiansafka/img2vec/master/img2vec_pytorch/img_to_vec.py

from img_to_vec import Img2Vec
img2vec = Img2Vec()

len(features[0])

from PIL import Image

imgvecs = []
for i in data.pixels:
  imgvec = img2vec.get_vec(Image.fromarray(str2img(i)).convert('RGB'))
  imgvecs.append(imgvec)

# Az SVD 2 dimenzióba képezi le a képeket
from sklearn.decomposition import TruncatedSVD
svd = TruncatedSVD(n_components=2) # az első 2 komponenst tartjuk csak meg (2Dbe mappelünk)
p2d = svd.fit_transform(imgvecs)
p2d # minden képhez egy 2D vektor

import matplotlib.pyplot as plt
plt.figure(figsize=(15,15))
plt.scatter(p2d[:50,0], p2d[:50,1], c=data[:50].emotion) # az első 50 kép SVD koordinátáira kirakunk egy pöttyöt, aminek színe (c=) a kép címkéje

### bonus feladat: magukat a képeket rajzoljuk ki a pötty helyére
### segített: https://stackoverflow.com/questions/4860417/placing-custom-images-in-a-plot-window-as-custom-data-markers-or-to-annotate-t
from matplotlib.offsetbox import AnnotationBbox, OffsetImage

plt.figure(figsize=(15,15))
ax = plt.subplot(111)

# kép x és y tengelyét állítsuk az SVD min-max értékeire
ax.set(xlim=(min(p2d[:50,0]), max(p2d[:50,0])), ylim=(min(p2d[:50,1]), max(p2d[:50,1])))

for i in range(50):
  img = str2img(data.pixels[i])
  xy = p2d[i]
  ax.add_artist(AnnotationBbox(OffsetImage(img), xy))

"""## 2. feladat

A arcérzelem adatbázist klaszterezzük és minden klaszterből néhány egyedet jelenítsünk meg a 2D térben!
"""

### K-means kluszterezése az ezer képnek a pixelvektorok alapján (az eredeti térben)
from sklearn.cluster import KMeans
k=5
kmeans = KMeans(n_clusters=k).fit(imgvecs)

### Összegyűjtjük egy szótárba az egyes klaszterekbe sorolt képek indexeit
cluster = {}
for j in range(k):
  cluster[j] = [i for i, e in enumerate(kmeans.labels_) if e == j] # j. kluszterbe sorolt képek indexei

import matplotlib.colors as mcolors

plt.figure(figsize=(15,15))
ax = plt.subplot(111)
# kép x és y tengelyét állítsuk az ezer kép SVD min-max értékeire
ax.set(xlim=(min(p2d[:,0]), max(p2d[:,0])), ylim=(min(p2d[:,1]), max(p2d[:,1])))

for j in range(k): # minden klaszter
  for i in range(5): # első 5 képét jelenítjük meg
    img = str2img(data.pixels[ cluster[j][i] ]) # cluster[j][i] az index az eredeti adatbázisban
    xy = p2d[ cluster[j][i] ] # 2Dre mappelt koordináták
    ax.add_artist(AnnotationBbox(OffsetImage(img), xy, bboxprops = dict(edgecolor=list(mcolors.BASE_COLORS)[j]))) # a kereteket az egyes klaszterek színére állítjuk